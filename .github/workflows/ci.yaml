name: CI

on:
  pull_request:
    branches:
      - development
      - "[0-9]+.[0-9]+.x"

  # Run CI also on push to master
  push:
    branches:
      - master

env:
  REPO: quay.io
  REPO_NAME: nuclio
  NUCLIO_LABEL: 1.7.2 # ${{ github.run_number }}
  NAMESPACE: nuclio
  NUCLIO_GO_TEST_TIMEOUT: "30m"

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Dump github context
        run: echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Dump runner context
        run: echo "$RUNNER_CONTEXT"
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}

      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: "1.14"

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Ensure go test files are build annotated
        run: make ensure-test-files-annotated

      - name: Lint
        run: make lint

  test_short:
    name: Test short
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: "1.14"

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run unit test
        run: |
          make test-unit

  build_nuctl:
    name: Build nuctl
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: "1.14"

      - name: Build
        run: |
          make nuctl-bin

      - name: Ensure version
        run: |
          ./nuctl-$NUCLIO_LABEL-linux-amd64 version

  build_docker_images:
    name: Build docker images
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        run: echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Dump runner context
        run: echo "$RUNNER_CONTEXT"
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}

      - name: Dump github ref
        run: echo "$GITHUB_REF"

      - uses: actions/checkout@v2

      # since github-actions gives us 14G only, and fills it up with some garbage
      # we will free up some space for us (~2GB)
      - name: Freeing up disk space
        run: |
          chmod +x "${GITHUB_WORKSPACE}/hack/scripts/ci/free-space.sh"
          "${GITHUB_WORKSPACE}/hack/scripts/ci/free-space.sh"

  test_k8s:
    name: Test Kubernetes
    runs-on: ubuntu-latest
    needs:
      - build_docker_images
    steps:
      - uses: actions/checkout@v2

      - uses: azure/setup-helm@v1
        with:
          version: "v3.6.3"

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: manusa/actions-setup-minikube@v2.4.2
        with:
          minikube version: "v1.22.0"
          kubernetes version: "v1.20.11"
          driver: docker
          github token: ${{ github.token }}
          start args: "--addons registry --addons ingress"

      - name: Post minikube setup
        run: |

          # redirect $(minikube ip):5000 -> localhost:5000
          docker run --rm --detach --network=host alpine ash -c "apk add socat && socat TCP-LISTEN:5000,reuseaddr,fork TCP:$(minikube ip):5000"
          minikube kubectl -- config view --flatten > kubeconfig_flatten

      - name: Load nuclio docker images
        run: |
          make pull-docker-images

      - name: Export env
        run: |
          echo "NUCTL_EXTERNAL_IP_ADDRESSES=$(minikube ip)" >> $GITHUB_ENV
          echo "NUCLIO_TEST_REGISTRY_URL=localhost:5000" >> $GITHUB_ENV
          echo "NUCLIO_TEST_KUBECONFIG=$(pwd)/kubeconfig_flatten" >> $GITHUB_ENV
          echo "NUCLIO_TEST_KUBE_DEFAULT_INGRESS_HOST=nuclio-test-function-host.info" >> $GITHUB_ENV

      - name: Install nuclio helm chart
        run: |

          # create namespace
          minikube kubectl -- create namespace ${NAMESPACE}

          # install helm chart
          ./test/k8s/ci_assets/install_nuclio_crds.sh

      - name: Run k8s tests
        run: |

          # write function host to /etc/hosts
          echo "${NUCTL_EXTERNAL_IP_ADDRESSES} ${NUCLIO_TEST_KUBE_DEFAULT_INGRESS_HOST}" | sudo tee -a /etc/hosts

          make test-k8s

